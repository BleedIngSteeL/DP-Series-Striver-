#include <bits/stdc++.h>
int solve(int ind,int w,vector<int> &val, vector<int> &wt,vector<vector<int>> &dp){
    if(ind==0){
        return ((w/wt[0])*val[0]);
    }
    if(dp[ind][w] != -1) return dp[ind][w];
    int notTake=solve(ind-1,w,val,wt,dp);
    int take=INT_MIN;
    if(wt[ind]<=w) take= val[ind] + solve(ind,w-wt[ind],val,wt,dp);

    return dp[ind][w] = max(take,notTake);
}

int unboundedKnapsack(int n, int w, vector<int> &val, vector<int> &wt){
    // Write Your Code Here.
    vector<vector<int>> dp(n,vector<int> (w+1,-1));
    return solve(n-1,w,val,wt,dp);
}
