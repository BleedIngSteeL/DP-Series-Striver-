// recursive code (runtime error) 
#include <bits/stdc++.h> 

int solve(int i,int j1, int j2,int r, int c, vector<vector<int>> &grid){
    // base cases 
    if(j1<0 || j2<0 || j1>=c || j2>=c) return -1e8;
    if(i==c-1){
        if(j1==j2) return grid[i][j1];
        else{
            return grid[i][j1] + grid[i][j2];
        }
    }

    // now explore all 9 paths 
    int maxi=0;
    for(int delj1=-1;delj1<=1;delj1++){
        for(int delj2=-1;delj2<=1;delj2++){
            int value=0;
            if(delj1==delj2){
                value=grid[i][j1];
            }
            else{
                value=grid[i][j1] + grid[i][j2];
            }
            value += solve(i+1,j1+delj1,j2+delj2,r,c,grid);
            maxi=max(maxi,value);
        }
    }
    return maxi;
}

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    return solve(0,0,c-1,r,c,grid);
}







// MEMOIZATION CODE 

#include <bits/stdc++.h> 

int solve(int i,int j1, int j2,int r, int c, vector<vector<int>> &grid,vector<vector<vector<int>>> &dp){
    // base cases 
    if(j1<0 || j2<0 || j1>=c || j2>=c) return -1e8;
    if(i==r-1){
        if(j1==j2) return grid[i][j1];
        else{
            return grid[i][j1] + grid[i][j2];
        }
    }

    if(dp[i][j1][j2] != -1) return dp[i][j1][j2];

    // now explore all 9 paths 
    int maxi=-1e8;
    for(int delj1=-1;delj1<=1;delj1++){
        for(int delj2=-1;delj2<=1;delj2++){
            int value=0;
            if(j1==j2){
                value=grid[i][j1];
            }
            else{
                value=grid[i][j1] + grid[i][j2];
            }
            value += solve(i+1,j1+delj1,j2+delj2,r,c,grid,dp);
            maxi=max(maxi,value);
        }
    }
    return dp[i][j1][j2] = maxi;
}

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    vector<vector<vector<int>>> dp(r, vector<vector<int>>(c,vector<int> (c,-1)));
    return solve(0,0,c-1,r,c,grid,dp);
}
