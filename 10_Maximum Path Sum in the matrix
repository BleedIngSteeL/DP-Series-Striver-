#include <bits/stdc++.h> 

int solve(int i,int j,vector<vector<int>> &matrix,vector<vector<int>> &dp){
    int n=matrix.size();
    int m=matrix[0].size();
    if(j<0 || j>=m) return -1e8;
    if(i==0) return matrix[0][j];

    if(dp[i][j] != -1) return dp[i][j];

    int up=matrix[i][j] + solve(i-1,j,matrix,dp);
    int ld=matrix[i][j] + solve(i-1,j-1,matrix,dp);
    int rd=matrix[i][j] + solve(i-1,j+1,matrix,dp);

    return dp[i][j]=max(up, max(ld,rd));
}


int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n=matrix.size();
    int m=matrix[0].size();
    int maxi=-1e8;
    vector<vector<int>> dp(n, vector<int> (m,-1));
    for(int j=0;j<m;j++){
        maxi=max(maxi,solve(n-1,j,matrix,dp));
    }
    return maxi;
}
