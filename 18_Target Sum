
// TARGET SUM banane ke liye laga Partitions With Given Difference
// Partitions With Given Difference banane ke liye laga Count Subsets with Sum K



class Solution {
public:
//  Partitions With Given Difference (coding ninjas template )

     // DP 17 (striver)
    int findWays(vector<int>& arr, int k)
    {
        int n=arr.size();
        vector<vector<int>> dp(n,vector<int> (k+1,0));

        if(arr[0]==0) dp[0][0]=2;
        else dp[0][0]=1;

        if(arr[0] != 0 && arr[0] <= k) dp[0][arr[0]]=1;

        for(int index=1;index<n;index++){
            for(int sum=0;sum<=k;sum++){
                int notPick=dp[index-1][sum];
                int pick=0;
                if(arr[index]<=sum){
                    pick=dp[index-1][sum-arr[index]];
                }

                dp[index][sum]=(pick+ notPick);
            }
        }
        return dp[n-1][k];

    }

    int countPartitions(int n, int d, vector<int> &arr) {
        int totSum=0;
        for(auto it: arr) totSum+= it;
        if(totSum-d < 0 || (totSum-d)%2==1) return false;

        return findWays(arr,(totSum-d)/2);
    }


    int findTargetSumWays(vector<int>& nums, int target) {
        // kehne ka mtlb same hi hai purane question jaisa hi
        // ki 2 subset banao jinka difference target ke equal ho 
        int n=nums.size();
        return countPartitions(n,target,nums);
    }
};




